# Data Processing Scripts Cursor Rules

## Overview
This directory contains scripts for compiling and processing QTL scan data from raw gz files into optimized FST format for the qtlApp Shiny application.

## Script Workflow

### 1. chromosome_compile.R
**Purpose**: Compile raw gz scan files into chromosome-specific FST files
**Input**: Raw gz files from scan output directories
**Output**: Raw FST files (one per chromosome)

**Key Features**:
- Parallel processing for performance
- Marker-to-chromosome mapping using RDS marker file
- Memory-efficient chunked processing
- Automatic chromosome standardization (20→X, 21→Y, 22→M)

### 2. prepare_fst_data.R  
**Purpose**: Process raw FST files into app-ready format
**Input**: Raw FST files from chromosome_compile.R
**Output**: Processed, sorted FST files with row indices

**Key Features**:
- Gene/transcript symbol mapping for biological data
- Column cleanup (removes chr_from_map, which_mice)
- Automatic sorting by Phenotype for efficient trait access
- Row index generation for fast trait-based reading
- Support for multiple data types (genes, isoforms, clinical, liver_lipids)

## Coding Standards

### R Style
- Use data.table for large data operations (`setorder()`, `[, col := value]`)
- Use 2-space indentation
- Explicit package namespacing (`data.table::fread()`)
- Descriptive variable names with underscores

### Error Handling
- Use `tryCatch()` for file operations
- Provide informative warning/error messages with file names
- Check file existence before processing
- Validate data structure before operations

### Performance
- Process files in chunks for memory efficiency
- Use parallel processing where appropriate (`mclapply()`)
- Set appropriate FST compression levels (50)
- Sort data by Phenotype for efficient trait-based access

### File Management
- Use consistent naming patterns:
  - Raw: `chromosome{N}_{dataset}_data.fst`
  - Processed: `chromosome{N}_{dataset}_data_processed.fst`
  - Row indices: `chromosome{N}_{dataset}_data_processed_rows.fst`
- Create backups before overwriting files
- Clean up temporary files and variables (`rm()`, `gc()`)

## Configuration

### Input/Output Directories
- Input: Scan output directories (configurable)
- Output: `/data/dev/miniViewer_3.0/` (or configurable)
- Markers: RDS file with marker-chromosome mapping

### Data Types Supported
- **liver_lipids**: Lipid metabolomics data
- **genes**: Gene expression data (requires symbol mapping)
- **isoforms**: Transcript isoform data (requires symbol mapping)
- **clinical**: Clinical phenotype data

### File Processing Patterns
Configure in `file_processing_configs` list:
```r
list(
  type = "liver_lipids", 
  pattern = "chromosome[0-9XYM]+_liver_lipids_all_mice_additive_data\\.fst$"
)
```

## Adding New Data Types

### Step 1: Update chromosome_compile.R
1. Set `INPUT_DIR` to your scan output directory
2. Ensure marker file path is correct
3. Run script to generate raw FST files

### Step 2: Update prepare_fst_data.R
1. Add new data type to `file_processing_configs`
2. Update file pattern to match your naming convention
3. Add symbol mapping logic if needed (for genes/isoforms)
4. Run script to generate processed files

### Step 3: Update file_index.csv
Add entries pointing to the new processed FST files with correct metadata.

## Data Quality Checks

### Validation Steps
- Verify marker-chromosome mapping completeness
- Check for missing required columns (marker, Phenotype, LOD)
- Validate data types and handle conversions
- Ensure row counts match between raw and processed files

### Performance Metrics
- Monitor FST file sizes and compression ratios
- Check data efficiency ratios (should be 1.0 after sorting)
- Validate row index ranges are contiguous

## Troubleshooting

### Common Issues
- **Memory errors**: Reduce chunk size or use fewer cores
- **Missing markers**: Check marker RDS file and chromosome mapping
- **Efficiency ratio < 1.0**: Data not properly sorted by Phenotype
- **Empty processed files**: Check file patterns and input directories

### Debug Tips
- Use `message()` for progress tracking
- Check intermediate file existence with `file.exists()`
- Validate data structure with `str()` and `colnames()`
- Monitor memory usage with `gc()` output

## File Dependencies
- Marker file: `CHTC_dietDO_markers_RDSgrcm39.rds`
- Gene annotations: `gene_annotations.csv` (optional)
- Transcript annotations: `transcript_annotations.csv` (optional)
- FST rows functions: `../../R/fst_rows.R`

## Best Practices
- Test with small datasets first
- Monitor disk space during processing
- Keep raw files as backups
- Document any custom modifications
- Use version control for script changes 